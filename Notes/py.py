#                      Variables:

"""
x, y, z= 1, "orange", 2.3
print(x)
"""
######################
"""
x = y = z= 1
print(x)
y=2
print(y)
"""
######################
"""
x,y,z=[1,2,3]
print(x)
a, b, c=[1,2,3,4,5,6,7,8,9,10]
print(a) #too many values to unpack (expected 3)
"""
######################
"""
print(1,2,3) #1 2 3
print("1","2","3") #1 2 3
print("1"+"2"+"3") #123
print("A","B","C")  #A B C
print("A"+"B"+"C") #ABC
print("A","B","C",sep="*") #A*B*C
print("A","B","C",sep=" ") #A B C
"""
######################
"""
print(5+1) #6
print("A"+"B") #AB
print("A",1) #A 1
# ("A"+1) #TypeError: can only concatenate str (not "int") to str
print("A"+str(1)) #A1
"""
######################
"""
#global variables
x= "awesome"
def myfunc():
    x="fantastic"
    print("Python is "+x)
myfunc()
print("Python is "+x)
"""
######################
"""
def myfunc():
    global x
    x="fantastic"
    print("Python is "+x)
myfunc()
print("Python is "+x)
global x #SyntaxError: name 'x' is assigned to before global declaration
x="awesome"
myfunc()
print("Python is "+x)
"""
######################
"""
def myfunc():
    global x
    x="fantastic"
    print("Python is "+x) #Python is fantastic
myfunc()
print("Python is "+x) #Python is fantastic
x="awesome"
print("Python is "+x) #Python is awesome
myfunc() #Python is fantastic
print("Python is "+x) #Python is fantastic
"""
######################
"""
x= "awesome"
def myfunc():
    global x
    x="fantastic"
    print("Python is "+x) #Python is fantastic
myfunc()
print("Python is "+x) #Python is  fantastic , because x is global variable now
"""
######################
"""
Data types:
Text Type:	str e.g. "Hello World"
Numeric Types:	int, float, complex e.g. 20, 20.5, 1j
Sequence Types:	list, tuple, range e.g. [1,2,3], (1,2,3), range(6) means from 0 to 5
Mapping Type:	dict e.g. {"name" : "John", "age" : 36}
Set Types:	set, frozenset e.g. {"apple", "banana", "cherry"}, frozenset({"apple", "banana", "cherry"}) the difference between set and frozenset is that set is mutable and frozenset is immutable
Boolean Type:	bool e.g. True, False
Binary Types:	bytes, bytearray, memoryview e.g. b"Hello", bytearray(5), memoryview(bytes(5))  #bytes is immutable, bytearray is mutable, memoryview is mutable we use bytes() to convert string to bytes
# bytearray usecases are the same as list, but it can store only integers from 0 to 255
# the difference between bytes and bytearray is that bytes is immutable and bytearray is mutable
# THE DIFFERENCE between bytearray and memoryview is that bytearray is mutable and memoryview is immutable
None Type:	NoneType e.g. None it is used to define a null value, or no value at all
"""
######################
"""
# Numbers:
# three numbers types in Python:
# int, float, complex
# 1 , 1.0 , 1j
x=1
print(type(x))
x=2.8
print(int(x)) #2
print(float(x)) #2.8
print(complex(x)) #(2.8+0j)
#random number:
import random
print(random.randrange(1,10)) #random number between 1 and 9
print(float("5")) #5.0
print(int("x")) #ValueError
print(str("5")) #5
"""
######################
"""
# Strings:
a = "Hello, World!"
print(a)
print(a[:]) #Hello, World!
print(a[0]) #H
print(a[6:]) #World!
print(a[-1]) #!
print(a[-6:]) #World!
#multiline strings starts with three double quotes or three single quotes:
txt="We the people"
print("people" in txt) #True
if "people" not in txt:
    print("No")
else:
    print("Yes") #Yes
b = "Hello, World!"
print(b[2:5]) #llo without 5
print(b.upper())
print(b.lower())
b = " Hello, World!  "
print(a.strip()) # returns "Hello, World!"
print(a.replace("H", "J"))
print(a.split(",")) # returns ['Hello', ' World!']
a = "Hello"
b = "World"
c = a +" "+ b
print(c)
age = 36
txt = "My name is John, and I am " + age #TypeError: can only concatenate str (not "int") to str
txt = "My name is John, and I am " + str(age)
#or
txt = "My name is John, and I am {}"
quantity = 3
itemno = 567
price = 49.95
myOrder="I want {} pieces of item {} for {} dollars."
print(myOrder.format(quantity, itemno, price))
myOrder="I want to pay {2} dollars for {0} pieces of item {1}."
print(myOrder.format(quantity, itemno, price))
"""
######################
"""
# Booleans:

"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
############################################
"""
"""
######################